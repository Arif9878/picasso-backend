http:
  port: ${API_GATEWAY_PORT}

apiEndpoints:
  authentication:
    host: '*'
    paths: /auth/*
    methods: ["POST","OPTIONS"]

  user:
    host: '*'
    paths: /user/*
    methods: ["GET","POST","PUT","DELETE","OPTIONS"]

  dashboarduser:
    host: '*'
    paths: /dashboard/*
    methods: ["GET", "OPTIONS"]

  menutype:
    host: '*'
    paths: /menu-type/*
    methods: ["GET","POST","PUT","DELETE","OPTIONS"]

  menu:
    host: '*'
    paths: /menu/*
    methods: ["GET","POST","PUT","DELETE","OPTIONS"]

  oauth2_login:
    host: '*'
    paths: /social/google-oauth2/*
    methods: ["POST","OPTIONS"]

  satuankerja:
    host: '*'
    paths: /satuan-kerja/*
    methods: ["GET","POST","PUT","DELETE","OPTIONS"]

  jabatan:
    host: '*'
    paths: /jabatan/*
    methods: ["GET","POST","PUT","DELETE","OPTIONS"]

  tupoksijabatan:
    host: '*'
    paths: /tupoksi-jabatan/*
    methods: ["GET","POST","PUT","DELETE","OPTIONS"]

  logbook:
    host: '*'
    paths: /logbook/*
    methods: ["GET","POST","PUT","DELETE","OPTIONS"]

  exportpdf:
    host: '*'
    paths: /export-pdf/*
    methods: ["GET","OPTIONS"]
  
  monthlyreport:
    host: '*'
    paths: /monthly-report/*
    methods: ["GET","OPTIONS"]

  exportexcel:
    host: '*'
    paths: /export-excel/*
    methods: ["GET","OPTIONS"]

  project:
    host: '*'
    paths: /project/*
    methods: ["GET","POST","PUT","DELETE","OPTIONS"]

  attendance:
    host: '*'
    paths: /attendance/*
    methods: ["GET","POST","PUT","DELETE","OPTIONS"]

  devicetoken:
    host: '*'
    paths: /device-token/*
    methods: ["GET","POST","PUT","DELETE","OPTIONS"]

  notificationservice:
    host: '*'
    paths: /notification/*
    methods: ["POST","OPTIONS"]

  notificationmessage:
    host: '*'
    paths: /notification-message/*
    methods: ["GET","DELETE","OPTIONS"]

  dayoff:
    host: '*'
    paths: /day-off/*
    methods: ["GET","POST","DELETE","OPTIONS"]

  holidaydate:
    host: '*'
    paths: /holiday-date/*
    methods: ["GET","POST","PUT","DELETE","OPTIONS"]

  settings:
    host: '*'
    paths: /settings/*
    methods: ["GET","POST","PUT","DELETE","OPTIONS"]

  healthcheck:
    host: '*'
    paths: /healthcheck/*
    methods: ["GET","OPTIONS"]

serviceEndpoints:
  authentication:
    url: '${AUTHENTICATION_PY_SERVICE_URI}/api/'

  satuankerja:
    url: '${SATUANKERJA_GO_SERVICE_URI}/api/'

  jabatan:
    url: '${JABATAN_GO_SERVICE_URI}/api/'

  tupoksijabatan:
    url: '${TUPOKSI_JABATAN_GO_SERVICE_URI}/api/'

  logbook:
    url: '${LOGBOOK_NODEJS_SERVICE_URI}/api/'

  exportpdf:
    url: '${EXPORT_PDF_NODEJS_SERVICE_URI}/api/'

  monthlyreport:
    url: '${MONTHLY_REPORT_PY_SERVICE_URI}/api/'

  exportexcel:
    url: '${EXPORT_EXCEL_PY_SERVICE_URI}/api/'

  dashboarduser:
    url: '${DASHBOARD_USER_PY_SERVICE_URI}/api/'
  
  project:
    url: '${PROJECT_NODEJS_SERVICE_URI}/api/'

  attendance:
    url: '${ATTENDANCE_NODEJS_SERVICE_URI}/api/'

  devicetoken:
    url: '${DEVICE_TOKEN_GO_SERVICE_URI}/api/'
      
  notificationservice:
    url: '${NOTIFICATION_SERVICE_GO_SERVICE_URI}/api/'

  notificationmessage:
    url: '${NOTIFICATION_MESSAGE_GO_SERVICE_URI}/api/'

  dayoff:
    url: '${DAY_OFF_GO_SERVICE_URI}/api/'

  holidaydate:
    url: '${HOLIDAY_DATE_GO_SERVICE_URI}/api/'

  settings:
    url: '${SETTINGS_GO_SERVICE_URI}/api/'

  healthcheck:
    url: '${EXPORT_PDF_NODEJS_SERVICE_URI}/api/'

policies:
  - cors
  - basic-auth
  - expression
  - key-auth
  - log
  - oauth2
  - proxy
  - rate-limit
  - jwt
  - jaeger

pipelines:
  authentication:
    apiEndpoints:
      - authentication
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - proxy:
          - action:
              serviceEndpoint: authentication
              changeOrigin: true

  oauth2_login:
    apiEndpoints:
      - oauth2_login
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - proxy:
          - action:
              serviceEndpoint: authentication
              changeOrigin: true

  user:
    apiEndpoints:
      - user
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: authentication
              changeOrigin: true

  dashboarduser:
    apiEndpoints:
      - dashboarduser
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: dashboarduser
              changeOrigin: true
              
  menu:
    apiEndpoints:
      - menu
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: authentication
              changeOrigin: true

  menutype:
    apiEndpoints:
      - menutype
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: authentication
              changeOrigin: true
              
  satuankerja:
    apiEndpoints:
      - satuankerja
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: satuankerja
              changeOrigin: true

  jabatan:
    apiEndpoints:
      - jabatan
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: jabatan
              changeOrigin: true

  tupoksijabatan:
    apiEndpoints:
      - tupoksijabatan
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: tupoksijabatan
              changeOrigin: true

  logbook:
    apiEndpoints:
      - logbook
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
        - action:
            secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
            checkCredentialExistence: false

      - proxy:
          - action:
              serviceEndpoint: logbook
              changeOrigin: true
              timeout: 600000
  exportpdf:
    apiEndpoints:
      - exportpdf
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
        - action:
            secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
            checkCredentialExistence: false

      - proxy:
          - action:
              serviceEndpoint: exportpdf
              changeOrigin: true
              timeout: 600000
  monthlyreport:
    apiEndpoints:
      - monthlyreport
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: monthlyreport
              changeOrigin: true

  exportexcel:
    apiEndpoints:
      - exportexcel
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: exportexcel
              changeOrigin: true

  project:
    apiEndpoints:
      - project
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: project
              changeOrigin: true

  attendance:
    apiEndpoints:
      - attendance
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: attendance
              changeOrigin: true

  devicetoken:
    apiEndpoints:
      - devicetoken
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: devicetoken
              changeOrigin: true

  notificationservice:
    apiEndpoints:
      - notificationservice
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: notificationservice
              changeOrigin: true

  notificationmessage:
    apiEndpoints:
      - notificationmessage
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: notificationmessage
              changeOrigin: true

  dayoff:
    apiEndpoints:
      - dayoff
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: dayoff
              changeOrigin: true
  holidaydate:
    apiEndpoints:
      - holidaydate
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: holidaydate
              changeOrigin: true

  settings:
    apiEndpoints:
      - settings
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - jwt:
          - action:
              secretOrPublicKey: '${SECRET_KEY:-SECRET_KEY}'
              checkCredentialExistence: false
      - proxy:
          - action:
              serviceEndpoint: settings
              changeOrigin: true

  healthcheck:
    apiEndpoints:
      - healthcheck
    policies:
      - jaeger:
          - action:
              serviceName: 'api-gateway'
              collectorEndpoint: ${JAEGER_COLLECTTOR_END_POINT}
      - cors:
          - action:
              allowedHeaders: '*'
      - proxy:
          - action:
              serviceEndpoint: healthcheck
              changeOrigin: true